// Generated by Qodo Gen
import { calendar_v3, google } from 'googleapis'

import GoogleCalendarService from '@/utils/services/google.service'

describe('getEventById', () => {
  // Successfully retrieves an event by ID from Google Calendar
  it('should successfully retrieve an event by ID from Google Calendar', async () => {
    // Mock data
    const meeting_id = 'test-meeting-id'
    const calendarId = 'primary'
    const mockEvent = {
      data: {
        summary: 'Test Event',
        hangoutLink: 'https://meet.google.com/test',
      },
    }

    // Mock Google Calendar API
    const mockGet = jest.fn().mockImplementation((params, callback) => {
      callback(null, mockEvent)
    })

    const mockCalendar = {
      events: {
        get: mockGet,
      },
    }

    jest
      .spyOn(google, 'calendar')
      .mockReturnValue(mockCalendar as unknown as calendar_v3.Calendar)

    // Mock auth
    const mockAuth = {
      getToken: jest.fn().mockResolvedValue('mock-token'),
    }

    const googleService = new GoogleCalendarService(
      'test-account-address',
      'test-email',
      'test-provider'
    )
    googleService.auth = mockAuth

    // Call the method
    const result = await googleService.getEventById(meeting_id, calendarId)

    // Assertions
    expect(mockAuth.getToken).toHaveBeenCalled()
    expect(google.calendar).toHaveBeenCalledWith({
      version: 'v3',
      auth: 'mock-token',
    })
    expect(mockGet).toHaveBeenCalledWith(
      {
        auth: 'mock-token',
        calendarId: 'primary',
        eventId: 'testmeetingid',
      },
      expect.any(Function)
    )

    expect(result).toEqual({
      uid: meeting_id,
      ...mockEvent.data,
      id: meeting_id,
      additionalInfo: {
        hangoutLink: 'https://meet.google.com/test',
      },
      type: 'google_calendar',
      password: '',
      url: '',
    })
  })

  // Handles undefined _calendarId parameter gracefully
  it('should handle undefined calendarId parameter gracefully', async () => {
    // Mock data
    const meeting_id = 'test-meeting-id'
    const mockEvent = {
      data: {
        summary: 'Test Event',
        hangoutLink: 'https://meet.google.com/test',
      },
    }

    // Spy on parseCalendarId
    const parseCalendarIdSpy = jest.spyOn(
      GoogleCalendarService.prototype,
      'parseCalendarId'
    )

    // Mock Google Calendar API
    const mockGet = jest.fn().mockImplementation((params, callback) => {
      callback(null, mockEvent)
    })

    const mockCalendar = {
      events: {
        get: mockGet,
      },
    }

    jest
      .spyOn(google, 'calendar')
      .mockReturnValue(mockCalendar as unknown as calendar_v3.Calendar)

    // Mock auth
    const mockAuth = {
      getToken: jest.fn().mockResolvedValue('mock-token'),
    }

    const googleService = new GoogleCalendarService(
      'test-account-address',
      'test-email',
      'test-provider'
    )
    googleService.auth = mockAuth

    // Call the method with undefined calendarId
    const result = await googleService.getEventById(meeting_id, undefined)

    // Assertions
    expect(parseCalendarIdSpy).toHaveBeenCalledWith(undefined)
    expect(mockGet).toHaveBeenCalledWith(
      {
        auth: 'mock-token',
        calendarId: undefined,
        eventId: 'testmeetingid',
      },
      expect.any(Function)
    )

    expect(result).toEqual({
      uid: meeting_id,
      ...mockEvent.data,
      id: meeting_id,
      additionalInfo: {
        hangoutLink: 'https://meet.google.com/test',
      },
      type: 'google_calendar',
      password: '',
      url: '',
    })
  })
})
